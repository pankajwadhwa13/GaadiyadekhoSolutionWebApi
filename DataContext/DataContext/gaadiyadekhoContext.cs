// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Domain.Entities

namespace Data.DataContext
{
    public partial class gaadiyadekhoContext : DbContext
    {
        public gaadiyadekhoContext(DbContextOptions<gaadiyadekhoContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Approvedbid> Approvedbids { get; set; }

        public virtual DbSet<AspNetRole1> AspNetRoles1 { get; set; }

        public virtual DbSet<AspNetUser1> AspNetUsers1 { get; set; }

        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }

        public virtual DbSet<AspnetApplication> AspnetApplications { get; set; }

        public virtual DbSet<AspnetMembership> AspnetMemberships { get; set; }

        public virtual DbSet<AspnetPath> AspnetPaths { get; set; }

        public virtual DbSet<AspnetPersonalizationAllUser> AspnetPersonalizationAllUsers { get; set; }

        public virtual DbSet<AspnetPersonalizationPerUser> AspnetPersonalizationPerUsers { get; set; }

        public virtual DbSet<AspnetProfile> AspnetProfiles { get; set; }

        public virtual DbSet<AspnetRole> AspnetRoles { get; set; }

        public virtual DbSet<AspnetSchemaVersion> AspnetSchemaVersions { get; set; }

        public virtual DbSet<AspnetUser> AspnetUsers { get; set; }

        public virtual DbSet<AspnetUsersInRole> AspnetUsersInRoles { get; set; }

        public virtual DbSet<AspnetWebEventEvent> AspnetWebEventEvents { get; set; }

        public virtual DbSet<AuctionEvent> AuctionEvents { get; set; }

        public virtual DbSet<Auctionsbid> Auctionsbids { get; set; }

        public virtual DbSet<AuctionsbidsHistory> AuctionsbidsHistories { get; set; }

        public virtual DbSet<BankKitBid> BankKitBids { get; set; }

        public virtual DbSet<Bid> Bids { get; set; }

        public virtual DbSet<BidOffer> BidOffers { get; set; }

        public virtual DbSet<BidPriceHistory> BidPriceHistories { get; set; }

        public virtual DbSet<BidVehicle> BidVehicles { get; set; }

        public virtual DbSet<Bidhistory> Bidhistories { get; set; }

        public virtual DbSet<Bidvecdoc> Bidvecdocs { get; set; }

        public virtual DbSet<Bidwhishlist> Bidwhishlists { get; set; }

        public virtual DbSet<BodyType> BodyTypes { get; set; }

        public virtual DbSet<Brand> Brands { get; set; }

        public virtual DbSet<Bulkvehcile> Bulkvehciles { get; set; }

        public virtual DbSet<CategoryBidIncrtement> CategoryBidIncrtements { get; set; }

        public virtual DbSet<ChasshieDetail> ChasshieDetails { get; set; }

        public virtual DbSet<ChassiPart> ChassiParts { get; set; }

        public virtual DbSet<Chassiattribute> Chassiattributes { get; set; }

        public virtual DbSet<Chassie> Chassies { get; set; }

        public virtual DbSet<Chassindentity> Chassindentities { get; set; }

        public virtual DbSet<Chat> Chats { get; set; }

        public virtual DbSet<Colour> Colours { get; set; }

        public virtual DbSet<Connection> Connections { get; set; }

        public virtual DbSet<Country> Countries { get; set; }

        public virtual DbSet<Dealer> Dealers { get; set; }

        public virtual DbSet<DealerCategory> DealerCategories { get; set; }

        public virtual DbSet<DealerLocation> DealerLocations { get; set; }

        public virtual DbSet<DealerPoint> DealerPoints { get; set; }

        public virtual DbSet<Dealersetting> Dealersettings { get; set; }

        public virtual DbSet<DelersVehcile> DelersVehciles { get; set; }

        public virtual DbSet<District> Districts { get; set; }

        public virtual DbSet<EventPermision> EventPermisions { get; set; }

        public virtual DbSet<EventVechileImage> EventVechileImages { get; set; }

        public virtual DbSet<EventVehicle> EventVehicles { get; set; }

        public virtual DbSet<ExpertContent> ExpertContents { get; set; }

        public virtual DbSet<ExpertPage> ExpertPages { get; set; }

        public virtual DbSet<Expertpoint> Expertpoints { get; set; }

        public virtual DbSet<FancyNumber> FancyNumbers { get; set; }

        public virtual DbSet<FinaceRequirement> FinaceRequirements { get; set; }

        public virtual DbSet<FreeOldVechileImage> FreeOldVechileImages { get; set; }

        public virtual DbSet<FreeOldVehicle> FreeOldVehicles { get; set; }

        public virtual DbSet<FreeOldVehiclenew> FreeOldVehiclenews { get; set; }

        public virtual DbSet<HomepageVehcile> HomepageVehciles { get; set; }

        public virtual DbSet<Homepagecomaprevec> Homepagecomaprevecs { get; set; }

        public virtual DbSet<Homepageshowcase> Homepageshowcases { get; set; }

        public virtual DbSet<Importanceofinsurence> Importanceofinsurences { get; set; }

        public virtual DbSet<IndiainCity> IndiainCities { get; set; }

        public virtual DbSet<InsurenseRequirement> InsurenseRequirements { get; set; }

        public virtual DbSet<Jugad> Jugads { get; set; }

        public virtual DbSet<LandinglatestVec> LandinglatestVecs { get; set; }

        public virtual DbSet<LengthType> LengthTypes { get; set; }

        public virtual DbSet<Message> Messages { get; set; }

        public virtual DbSet<MigrationHistory> MigrationHistories { get; set; }

        public virtual DbSet<NeWvehicleFeature> NeWvehicleFeatures { get; set; }

        public virtual DbSet<Nessistynsurence> Nessistynsurences { get; set; }

        public virtual DbSet<NewVecAttrContent> NewVecAttrContents { get; set; }

        public virtual DbSet<NewVecCompare> NewVecCompares { get; set; }

        public virtual DbSet<NewVehicle> NewVehicles { get; set; }

        public virtual DbSet<NewVehicleSpecification> NewVehicleSpecifications { get; set; }

        public virtual DbSet<NewVehilcePrice> NewVehilcePrices { get; set; }

        public virtual DbSet<NewvecAttribute> NewvecAttributes { get; set; }

        public virtual DbSet<NewvecSubAttribute> NewvecSubAttributes { get; set; }

        public virtual DbSet<NewvecSubAttributesCategory> NewvecSubAttributesCategories { get; set; }

        public virtual DbSet<Newvehicle1> Newvehicle1s { get; set; }

        public virtual DbSet<Notification> Notifications { get; set; }

        public virtual DbSet<OfferBid> OfferBids { get; set; }

        public virtual DbSet<OfflineVehicleMessage> OfflineVehicleMessages { get; set; }

        public virtual DbSet<OldVechileImage> OldVechileImages { get; set; }

        public virtual DbSet<OldVechileImages1> OldVechileImages1s { get; set; }

        public virtual DbSet<OldVehicle> OldVehicles { get; set; }

        public virtual DbSet<OldVehicle1> OldVehicle1s { get; set; }

        public virtual DbSet<OldVehicleBid> OldVehicleBids { get; set; }

        public virtual DbSet<OtpLog> OtpLogs { get; set; }

        public virtual DbSet<PostRequirement> PostRequirements { get; set; }

        public virtual DbSet<Purchasehistory> Purchasehistories { get; set; }

        public virtual DbSet<Request> Requests { get; set; }

        public virtual DbSet<Rtafile> Rtafiles { get; set; }

        public virtual DbSet<RtafileDocument> RtafileDocuments { get; set; }

        public virtual DbSet<RtaofficeAddress> RtaofficeAddresses { get; set; }

        public virtual DbSet<Safty> Safties { get; set; }

        public virtual DbSet<SellerType> SellerTypes { get; set; }

        public virtual DbSet<SellerVehicleType> SellerVehicleTypes { get; set; }

        public virtual DbSet<Sendsm> Sendsms { get; set; }

        public virtual DbSet<State> States { get; set; }

        public virtual DbSet<SubDistrict> SubDistricts { get; set; }

        public virtual DbSet<TblNotification> TblNotifications { get; set; }

        public virtual DbSet<UsersPin> UsersPins { get; set; }

        public virtual DbSet<Variet> Variets { get; set; }

        public virtual DbSet<Vechile> Vechiles { get; set; }

        public virtual DbSet<VechileCondition> VechileConditions { get; set; }

        public virtual DbSet<VechileImage> VechileImages { get; set; }

        public virtual DbSet<VechileKind> VechileKinds { get; set; }

        public virtual DbSet<VechileModel> VechileModels { get; set; }

        public virtual DbSet<VechileSizeConfiguration> VechileSizeConfigurations { get; set; }

        public virtual DbSet<VechileSubType> VechileSubTypes { get; set; }

        public virtual DbSet<VechileType> VechileTypes { get; set; }

        public virtual DbSet<VehicleRequirement> VehicleRequirements { get; set; }

        public virtual DbSet<VisitorChat> VisitorChats { get; set; }

        public virtual DbSet<Visitormapping> Visitormappings { get; set; }

        public virtual DbSet<Wallet> Wallets { get; set; }

        public virtual DbSet<WalletResponse> WalletResponses { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Approvedbid>(entity =>
            {
                entity.ToTable("Approvedbids", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Bidid).HasColumnName("bidid");
                entity.Property(e => e.Delaerid)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("delaerid");
                entity.Property(e => e.Status)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("status");
                entity.Property(e => e.Updatedtime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatedtime");
            });

            modelBuilder.Entity<AspNetRole1>(entity =>
            {
                entity.ToTable("AspNetRoles");

                entity.Property(e => e.Id).HasMaxLength(128);
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<AspNetUser1>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__AspNetUs__3214EC07450D0022");

                entity.ToTable("AspNetUsers");

                entity.Property(e => e.Id).HasMaxLength(128);
                entity.Property(e => e.AdharCard)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
                entity.Property(e => e.Adress)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
                entity.Property(e => e.Bdcategories)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("bdcategories");
                entity.Property(e => e.BidEvents)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("bidEvents");
                entity.Property(e => e.Bidpermission).HasColumnName("bidpermission");
                entity.Property(e => e.Bidquantity).HasColumnName("bidquantity");
                entity.Property(e => e.Bidstates)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("bidstates");
                entity.Property(e => e.CompanyName)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
                entity.Property(e => e.DistrictId)
                    .HasDefaultValue(0)
                    .HasColumnName("DistrictID");
                entity.Property(e => e.Email).HasMaxLength(256);
                entity.Property(e => e.IsPreimum).HasDefaultValue(false);
                entity.Property(e => e.Isonnline).HasColumnName("ISonnline");
                entity.Property(e => e.Latitude)
                    .HasMaxLength(500)
                    .HasColumnName("latitude");
                entity.Property(e => e.LockoutEndDateUtc).HasColumnType("datetime");
                entity.Property(e => e.Longitude)
                    .HasMaxLength(500)
                    .HasColumnName("longitude");
                entity.Property(e => e.PanCard)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
                entity.Property(e => e.PinCode)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("pinCOde");
                entity.Property(e => e.PinHashCreatedDate).HasColumnType("datetime");
                entity.Property(e => e.PinHashUpdatedDate).HasColumnType("datetime");
                entity.Property(e => e.Pricelimt)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("pricelimt");
                entity.Property(e => e.Profilepic).HasColumnName("profilepic");
                entity.Property(e => e.StateId)
                    .HasDefaultValue(0)
                    .HasColumnName("StateID");
                entity.Property(e => e.SubDistrictId)
                    .HasDefaultValue(0)
                    .HasColumnName("SubDistrictID");
                entity.Property(e => e.TotalVehiclePermission)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
                entity.Property(e => e.Totalcategories)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
                entity.Property(e => e.UserRoleId)
                    .HasMaxLength(128)
                    .HasColumnName("UserRoleID");
                entity.Property(e => e.VoterCard)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.HasOne(d => d.UserRole).WithMany(p => p.AspNetUser1s)
                    .HasForeignKey(d => d.UserRoleId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_AspNetuser_UserRoles");
            });

            modelBuilder.Entity<AspNetUserClaim>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.User).WithMany()
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_AspNetUserClaims_AspNetUsers");
            });

            modelBuilder.Entity<AspNetUserLogin>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.LoginProvider)
                    .IsRequired()
                    .HasMaxLength(128);
                entity.Property(e => e.ProviderKey)
                    .IsRequired()
                    .HasMaxLength(128);
                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.User).WithMany()
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_AspNetUserLogins_AspNetUsers");
            });

            modelBuilder.Entity<AspNetUserRole>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.RoleId)
                    .IsRequired()
                    .HasMaxLength(128);
                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<AspnetApplication>(entity =>
            {
                entity.HasKey(e => e.ApplicationName);

                entity.ToTable("aspnet_Applications");

                entity.Property(e => e.ApplicationName).HasMaxLength(256);
                entity.Property(e => e.ApplicationId).HasDefaultValueSql("(newid())");
                entity.Property(e => e.Description).HasMaxLength(256);
                entity.Property(e => e.LoweredApplicationName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<AspnetMembership>(entity =>
            {
                entity.HasKey(e => e.ApplicationId);

                entity.ToTable("aspnet_Membership");

                entity.Property(e => e.ApplicationId).ValueGeneratedNever();
                entity.Property(e => e.Comment).HasColumnType("ntext");
                entity.Property(e => e.CreateDate).HasColumnType("datetime");
                entity.Property(e => e.Email).HasMaxLength(256);
                entity.Property(e => e.FailedPasswordAnswerAttemptWindowStart).HasColumnType("datetime");
                entity.Property(e => e.FailedPasswordAttemptWindowStart).HasColumnType("datetime");
                entity.Property(e => e.LastLockoutDate).HasColumnType("datetime");
                entity.Property(e => e.LastLoginDate).HasColumnType("datetime");
                entity.Property(e => e.LastPasswordChangedDate).HasColumnType("datetime");
                entity.Property(e => e.LoweredEmail).HasMaxLength(256);
                entity.Property(e => e.MobilePin)
                    .HasMaxLength(16)
                    .HasColumnName("MobilePIN");
                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(128);
                entity.Property(e => e.PasswordAnswer).HasMaxLength(128);
                entity.Property(e => e.PasswordQuestion).HasMaxLength(256);
                entity.Property(e => e.PasswordSalt)
                    .IsRequired()
                    .HasMaxLength(128);
                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.User).WithMany(p => p.AspnetMemberships)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AspNetMembersihp_AspNetUsers");
            });

            modelBuilder.Entity<AspnetPath>(entity =>
            {
                entity.HasKey(e => e.ApplicationId);

                entity.ToTable("aspnet_Paths");

                entity.Property(e => e.ApplicationId).ValueGeneratedNever();
                entity.Property(e => e.LoweredPath)
                    .IsRequired()
                    .HasMaxLength(256);
                entity.Property(e => e.Path)
                    .IsRequired()
                    .HasMaxLength(256);
                entity.Property(e => e.PathId).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<AspnetPersonalizationAllUser>(entity =>
            {
                entity.HasKey(e => e.PathId);

                entity.ToTable("aspnet_PersonalizationAllUsers");

                entity.Property(e => e.PathId).ValueGeneratedNever();
                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
                entity.Property(e => e.PageSettings)
                    .IsRequired()
                    .HasColumnType("image");
            });

            modelBuilder.Entity<AspnetPersonalizationPerUser>(entity =>
            {
                entity.ToTable("aspnet_PersonalizationPerUser");

                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
                entity.Property(e => e.PageSettings)
                    .IsRequired()
                    .HasColumnType("image");
            });

            modelBuilder.Entity<AspnetProfile>(entity =>
            {
                entity.HasKey(e => e.PkId)
                    .HasName("PK_ID_aspnet_Profile")
                    .IsClustered(false);

                entity.ToTable("aspnet_Profile");

                entity.Property(e => e.PkId).HasColumnName("PK_ID");
                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
                entity.Property(e => e.PropertyNames)
                    .IsRequired()
                    .HasColumnType("ntext");
                entity.Property(e => e.PropertyValuesBinary)
                    .IsRequired()
                    .HasColumnType("image");
                entity.Property(e => e.PropertyValuesString)
                    .IsRequired()
                    .HasColumnType("ntext");
            });

            modelBuilder.Entity<AspnetRole>(entity =>
            {
                entity.HasKey(e => e.ApplicationId);

                entity.ToTable("aspnet_Roles");

                entity.Property(e => e.ApplicationId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(256);
                entity.Property(e => e.LoweredRoleName)
                    .IsRequired()
                    .HasMaxLength(256);
                entity.Property(e => e.RoleId).HasDefaultValueSql("(newid())");
                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<AspnetSchemaVersion>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("aspnet_SchemaVersions");

                entity.Property(e => e.CompatibleSchemaVersion)
                    .IsRequired()
                    .HasMaxLength(128);
                entity.Property(e => e.Feature)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<AspnetUser>(entity =>
            {
                entity.HasKey(e => e.ApplicationId);

                entity.ToTable("aspnet_Users");

                entity.Property(e => e.ApplicationId).ValueGeneratedNever();
                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");
                entity.Property(e => e.LoweredUserName)
                    .IsRequired()
                    .HasMaxLength(256);
                entity.Property(e => e.MobileAlias)
                    .HasMaxLength(16)
                    .HasDefaultValueSql("(NULL)");
                entity.Property(e => e.UserId).HasDefaultValueSql("(newid())");
                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<AspnetUsersInRole>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("aspnet_UsersInRoles");
            });

            modelBuilder.Entity<AspnetWebEventEvent>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("aspnet_WebEvent_Events");

                entity.Property(e => e.ApplicationPath).HasMaxLength(256);
                entity.Property(e => e.ApplicationVirtualPath).HasMaxLength(256);
                entity.Property(e => e.Details).HasColumnType("ntext");
                entity.Property(e => e.EventId)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .IsFixedLength();
                entity.Property(e => e.EventOccurrence).HasColumnType("decimal(19, 0)");
                entity.Property(e => e.EventSequence).HasColumnType("decimal(19, 0)");
                entity.Property(e => e.EventTime).HasColumnType("datetime");
                entity.Property(e => e.EventTimeUtc).HasColumnType("datetime");
                entity.Property(e => e.EventType)
                    .IsRequired()
                    .HasMaxLength(256);
                entity.Property(e => e.ExceptionType).HasMaxLength(256);
                entity.Property(e => e.MachineName)
                    .IsRequired()
                    .HasMaxLength(256);
                entity.Property(e => e.Message).HasMaxLength(1024);
                entity.Property(e => e.RequestUrl).HasMaxLength(1024);
            });

            modelBuilder.Entity<AuctionEvent>(entity =>
            {
                entity.ToTable("AuctionEvents", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Allowedlocation)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("allowedlocation");
                entity.Property(e => e.BankerContact)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
                entity.Property(e => e.EmployerContact)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
                entity.Property(e => e.EndTime).HasColumnType("datetime");
                entity.Property(e => e.EventName)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
                entity.Property(e => e.Location)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
                entity.Property(e => e.StartTime).HasColumnType("datetime");
                entity.Property(e => e.Terms)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("terms");
                entity.Property(e => e.Type).HasColumnName("type");
                entity.Property(e => e.VehicleTypeId).HasColumnName("VehicleTypeID");

                entity.HasOne(d => d.VehicleType).WithMany(p => p.AuctionEvents)
                    .HasForeignKey(d => d.VehicleTypeId)
                    .HasConstraintName("FK_AuctionEvents_VehicleTypes");
            });

            modelBuilder.Entity<Auctionsbid>(entity =>
            {
                entity.ToTable("Auctionsbids", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.BidUserid)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
                entity.Property(e => e.Bidstatus)
                    .HasDefaultValue(true)
                    .HasColumnName("bidstatus");
                entity.Property(e => e.EventId).HasColumnName("EventID");
                entity.Property(e => e.EventVehicleId).HasColumnName("EventVehicleID");
                entity.Property(e => e.Upadtetime)
                    .HasDefaultValueSql("(switchoffset(sysdatetimeoffset(),'+05:30'))")
                    .HasColumnType("datetime")
                    .HasColumnName("upadtetime");
            });

            modelBuilder.Entity<AuctionsbidsHistory>(entity =>
            {
                entity.ToTable("AuctionsbidsHistory", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.BidUserid)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
                entity.Property(e => e.Bidstatus)
                    .HasDefaultValue(true)
                    .HasColumnName("bidstatus");
                entity.Property(e => e.EventId).HasColumnName("EventID");
                entity.Property(e => e.EventVehicleId).HasColumnName("EventVehicleID");
                entity.Property(e => e.Upadtetime)
                    .HasDefaultValueSql("(switchoffset(sysdatetimeoffset(),'+05:30'))")
                    .HasColumnType("datetime")
                    .HasColumnName("upadtetime");
            });

            modelBuilder.Entity<BankKitBid>(entity =>
            {
                entity.ToTable("bankKitBids");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.BidPrice).HasColumnName("bidPrice");
                entity.Property(e => e.BidTime)
                    .HasColumnType("datetime")
                    .HasColumnName("bidTime");
                entity.Property(e => e.UserId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("userID");
                entity.Property(e => e.VehicleId).HasColumnName("vehicleID");
            });

            modelBuilder.Entity<Bid>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.BidId).HasColumnName("bidID");
                entity.Property(e => e.BidPrice).HasColumnType("decimal(18, 0)");
                entity.Property(e => e.BidStatus).HasColumnName("bidStatus");
                entity.Property(e => e.BidUserId)
                    .HasMaxLength(500)
                    .HasColumnName("BIdUserID");
                entity.Property(e => e.Updatedtime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatedtime");
                entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
            });

            modelBuilder.Entity<BidOffer>(entity =>
            {
                entity.ToTable("BidOffer");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");
                entity.Property(e => e.EndDatetime).HasColumnType("datetime");
                entity.Property(e => e.Maxprice).HasColumnName("maxprice");
                entity.Property(e => e.Maxquntity).HasColumnName("maxquntity");
                entity.Property(e => e.Minprice).HasColumnName("minprice");
                entity.Property(e => e.Minquanity).HasColumnName("minquanity");
                entity.Property(e => e.Remarks)
                    .HasColumnType("text")
                    .HasColumnName("remarks");
                entity.Property(e => e.Startedatedatime)
                    .HasColumnType("datetime")
                    .HasColumnName("startedatedatime");
                entity.Property(e => e.Userid).HasColumnName("userid");
            });

            modelBuilder.Entity<BidPriceHistory>(entity =>
            {
                entity.ToTable("BidPriceHistory");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.BidId).HasColumnName("BidID");
                entity.Property(e => e.Price).HasColumnType("decimal(18, 0)");
                entity.Property(e => e.Userid)
                    .HasMaxLength(500)
                    .HasColumnName("userid");
                entity.Property(e => e.VehcileiD).HasColumnName("vehcileiD");
            });

            modelBuilder.Entity<BidVehicle>(entity =>
            {
                entity.ToTable("BidVehicle");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.EndDateTime).HasColumnType("datetime");
                entity.Property(e => e.StartDateTime).HasColumnType("datetime");
                entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
            });

            modelBuilder.Entity<Bidhistory>(entity =>
            {
                entity.ToTable("bidhistory", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Bidid).HasColumnName("bidid");
                entity.Property(e => e.Bidstatus)
                    .HasDefaultValue(true)
                    .HasColumnName("bidstatus");
                entity.Property(e => e.Eventid).HasColumnName("eventid");
                entity.Property(e => e.Price).HasColumnName("price");
                entity.Property(e => e.Upadtetime)
                    .HasDefaultValueSql("(switchoffset(sysdatetimeoffset(),'+05:30'))")
                    .HasColumnType("datetime")
                    .HasColumnName("upadtetime");
            });

            modelBuilder.Entity<Bidvecdoc>(entity =>
            {
                entity.ToTable("bidvecdocs", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Docstatus)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("docstatus");
                entity.Property(e => e.Doctype)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("doctype");
                entity.Property(e => e.Docurl)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("docurl");
                entity.Property(e => e.Eventid).HasColumnName("eventid");
                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime");
                entity.Property(e => e.Userid)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("userid");
                entity.Property(e => e.Vecid).HasColumnName("vecid");
            });

            modelBuilder.Entity<Bidwhishlist>(entity =>
            {
                entity.ToTable("bidwhishlist");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.EventId).HasColumnName("EventID");
                entity.Property(e => e.Ist)
                    .HasDefaultValueSql("(dateadd(minute,(330),getutcdate()))")
                    .HasColumnType("datetime")
                    .HasColumnName("ist");
                entity.Property(e => e.Userid)
                    .HasMaxLength(500)
                    .HasColumnName("userid");
                entity.Property(e => e.Utcdate)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.VehicleList)
                    .HasMaxLength(4000)
                    .HasColumnName("vehicleList");
            });

            modelBuilder.Entity<BodyType>(entity =>
            {
                entity.ToTable("BodyType");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Name).HasMaxLength(500);
            });

            modelBuilder.Entity<Brand>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.BrandName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.BrandlogoUrl).HasColumnType("text");
                entity.Property(e => e.VechileSubTypeId).HasColumnName("vechileSubTypeID");
                entity.Property(e => e.VechileTypeId).HasColumnName("vechileTypeID");

                entity.HasOne(d => d.VechileSubType).WithMany(p => p.Brands)
                    .HasForeignKey(d => d.VechileSubTypeId)
                    .HasConstraintName("FK_Brands_Brands");

                entity.HasOne(d => d.VechileType).WithMany(p => p.Brands)
                    .HasForeignKey(d => d.VechileTypeId)
                    .HasConstraintName("FK_Brands_VechileTypes");
            });

            modelBuilder.Entity<Bulkvehcile>(entity =>
            {
                entity.ToTable("bulkvehcile", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Brand)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.ChassieNumber)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.City)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.District)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.FitnessExphiry)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.Fule)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.Insurence)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.ManFuctringYear)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.Model)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.Name)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.Odomiter)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ODOMITER");
                entity.Property(e => e.Onwer)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.PermitValidity)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.Price)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.Rc).HasColumnName("RC");
                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.SittingCapsity)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.Slno)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.State)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.TaxValidity)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.Variet)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.VechileTypes)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.VehicleSubType)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CategoryBidIncrtement>(entity =>
            {
                entity.ToTable("CategoryBidIncrtement");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.BidPriceIncrement).HasColumnType("decimal(18, 0)");
                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            });

            modelBuilder.Entity<ChasshieDetail>(entity =>
            {
                entity.ToTable("chasshieDetail", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Chassieid).HasColumnName("chassieid");
                entity.Property(e => e.PartIndicator).HasMaxLength(4000);
                entity.Property(e => e.PartName).HasMaxLength(4000);
                entity.Property(e => e.PartValue).HasMaxLength(4000);
                entity.Property(e => e.Partid).HasColumnName("partid");
            });

            modelBuilder.Entity<ChassiPart>(entity =>
            {
                entity.ToTable("chassiParts", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Discription)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("discription");
                entity.Property(e => e.Partname)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("partname");
                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<Chassiattribute>(entity =>
            {
                entity.ToTable("chassiattribute", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Partname)
                    .HasMaxLength(500)
                    .HasColumnName("partname");
                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<Chassie>(entity =>
            {
                entity.ToTable("Chassie", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Chassinumver)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("chassinumver");
                entity.Property(e => e.Partdiscription)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("partdiscription");
                entity.Property(e => e.Pic)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("pic");
            });

            modelBuilder.Entity<Chassindentity>(entity =>
            {
                entity.ToTable("chassindentity", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Partname)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("partname");
                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<Chat>(entity =>
            {
                entity.ToTable("Chat");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.AdminChat).HasMaxLength(4000);
                entity.Property(e => e.AdminUser).HasMaxLength(500);
                entity.Property(e => e.AdminUserChatTime).HasColumnType("datetime");
                entity.Property(e => e.ChatUser).HasMaxLength(500);
                entity.Property(e => e.Chatcontenttype)
                    .HasMaxLength(500)
                    .IsFixedLength()
                    .HasColumnName("chatcontenttype");
                entity.Property(e => e.Chatpath)
                    .HasMaxLength(1000)
                    .HasColumnName("chatpath");
                entity.Property(e => e.LastSeenAdmin)
                    .HasColumnType("datetime")
                    .HasColumnName("lastSeenAdmin");
                entity.Property(e => e.Lastseenuser)
                    .HasColumnType("datetime")
                    .HasColumnName("lastseenuser");
                entity.Property(e => e.UserChat).HasMaxLength(4000);
                entity.Property(e => e.UserChatTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Colour>(entity =>
            {
                entity.Property(e => e.ColorName).HasMaxLength(500);
            });

            modelBuilder.Entity<Connection>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Connecti__3214EC075E24333C");

                entity.ToTable("Connection");

                entity.Property(e => e.CreatedAt)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.SellerId).HasMaxLength(255);
                entity.Property(e => e.VisitorId).HasMaxLength(255);
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.Property(e => e.CountryName).IsRequired();
            });

            modelBuilder.Entity<Dealer>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Dealers__3214EC278F5B4AF1");

                entity.ToTable("Dealers", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Address)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
                entity.Property(e => e.DealersPointId).HasColumnName("DealersPointID");
                entity.Property(e => e.Email)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.Name)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.DealersPoint).WithMany(p => p.Dealers)
                    .HasForeignKey(d => d.DealersPointId)
                    .HasConstraintName("FK_Dealers_DealerPoints");
            });

            modelBuilder.Entity<DealerCategory>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
                entity.Property(e => e.Dealerid)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<DealerLocation>(entity =>
            {
                entity.ToTable("DealerLocation");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Adress).HasMaxLength(3000);
                entity.Property(e => e.CountryId).HasColumnName("CountryID");
                entity.Property(e => e.DistrictId).HasColumnName("DistrictID");
                entity.Property(e => e.Email)
                    .HasMaxLength(500)
                    .HasColumnName("EMail");
                entity.Property(e => e.Fax).HasMaxLength(500);
                entity.Property(e => e.Name).HasMaxLength(500);
                entity.Property(e => e.Phone).HasMaxLength(500);
                entity.Property(e => e.StateId).HasColumnName("stateID");
                entity.Property(e => e.VehicleId).HasColumnName("VehicleID");

                entity.HasOne(d => d.Country).WithMany(p => p.DealerLocations)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_DealerLocation_Country");

                entity.HasOne(d => d.District).WithMany(p => p.DealerLocations)
                    .HasForeignKey(d => d.DistrictId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DealerLocation_Districs");

                entity.HasOne(d => d.State).WithMany(p => p.DealerLocations)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_DealerLocation_States");

                entity.HasOne(d => d.Vehicle).WithMany(p => p.DealerLocations)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_DealerLocation_vehicle");
            });

            modelBuilder.Entity<DealerPoint>(entity =>
            {
                entity.ToTable("DealerPoints", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.CityId).HasColumnName("CityID");
                entity.Property(e => e.CountryId).HasColumnName("CountryID");
                entity.Property(e => e.DistrictId).HasColumnName("DistrictID");
                entity.Property(e => e.Latitue)
                    .HasMaxLength(50)
                    .HasColumnName("latitue");
                entity.Property(e => e.Longitude)
                    .HasMaxLength(50)
                    .HasColumnName("longitude");
                entity.Property(e => e.StateId).HasColumnName("stateID");

                entity.HasOne(d => d.City).WithMany(p => p.DealerPoints)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_DealerPoints_SubDistricts");

                entity.HasOne(d => d.Country).WithMany(p => p.DealerPoints)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_DealerPoints_Countries");

                entity.HasOne(d => d.District).WithMany(p => p.DealerPoints)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_DealerPoints_Districts");

                entity.HasOne(d => d.State).WithMany(p => p.DealerPoints)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_DealerPoints_States");
            });

            modelBuilder.Entity<Dealersetting>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Dealerse__3213E83FCFE44B41");

                entity.ToTable("Dealersettings", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Domain)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("domain");
                entity.Property(e => e.HomepageBanner)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.Userid).HasColumnName("userid");
                entity.Property(e => e.Username)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<DelersVehcile>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__DelersVe__3214EC2713EC27F3");

                entity.ToTable("DelersVehciles", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.BrandId).HasColumnName("BrandID");
                entity.Property(e => e.Brands)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
                entity.Property(e => e.CateGoryId).HasColumnName("CateGoryID");
                entity.Property(e => e.DealerId).HasColumnName("DealerID");
                entity.Property(e => e.Models)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
                entity.Property(e => e.SubCategoryId).HasColumnName("SubCategoryID");

                entity.HasOne(d => d.Brand).WithMany(p => p.DelersVehciles)
                    .HasForeignKey(d => d.BrandId)
                    .HasConstraintName("FK_DelersVehciles_Brands");

                entity.HasOne(d => d.CateGory).WithMany(p => p.DelersVehciles)
                    .HasForeignKey(d => d.CateGoryId)
                    .HasConstraintName("FK_DelersVehciles_VehicleTypes");

                entity.HasOne(d => d.Dealer).WithMany(p => p.DelersVehciles)
                    .HasForeignKey(d => d.DealerId)
                    .HasConstraintName("FK_DelersVehciles_Dealers");
            });

            modelBuilder.Entity<District>(entity =>
            {
                entity.Property(e => e.Latitude)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("latitude");
                entity.Property(e => e.Longitude)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("longitude");

                entity.HasOne(d => d.State).WithMany(p => p.Districts)
                    .HasForeignKey(d => d.StateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Distric_State");
            });

            modelBuilder.Entity<EventPermision>(entity =>
            {
                entity.ToTable("EventPermision", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Createdon)
                    .HasColumnType("datetime")
                    .HasColumnName("createdon");
                entity.Property(e => e.EventId).HasColumnName("EventID");
                entity.Property(e => e.Permession)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("permession");
                entity.Property(e => e.Updatedon)
                    .HasColumnType("datetime")
                    .HasColumnName("updatedon");
                entity.Property(e => e.Userid)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("userid");

                entity.HasOne(d => d.Event).WithMany(p => p.EventPermisions)
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EventPermisions_AuctionEvents");
            });

            modelBuilder.Entity<EventVechileImage>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Discription).HasColumnType("text");
                entity.Property(e => e.EventId).HasColumnName("EventID");
                entity.Property(e => e.Url)
                    .HasColumnType("text")
                    .HasColumnName("URl");
                entity.Property(e => e.VechileId).HasColumnName("VechileID");
            });

            modelBuilder.Entity<EventVehicle>(entity =>
            {
                entity.ToTable("EventVehicle");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.BidEndTime).HasColumnType("datetime");
                entity.Property(e => e.BodyLenthId).HasColumnName("BodyLenthID");
                entity.Property(e => e.BodyType)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.BodyTypeId).HasColumnName("BodyTypeID");
                entity.Property(e => e.BrandId).HasColumnName("BrandID");
                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
                entity.Property(e => e.ChassieNumber).HasMaxLength(50);
                entity.Property(e => e.City).HasMaxLength(500);
                entity.Property(e => e.CityId).HasColumnName("CityID");
                entity.Property(e => e.Color).HasMaxLength(500);
                entity.Property(e => e.DistricId).HasColumnName("DistricID");
                entity.Property(e => e.EventId).HasColumnName("EventID");
                entity.Property(e => e.FitnessExphiryDate).HasColumnType("datetime");
                entity.Property(e => e.Fule).HasMaxLength(500);
                entity.Property(e => e.InsurenceExphiryDate).HasColumnType("datetime");
                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(50)
                    .IsFixedLength()
                    .HasColumnName("ipaddress");
                entity.Property(e => e.Latitude)
                    .HasMaxLength(500)
                    .HasColumnName("latitude");
                entity.Property(e => e.Lenth)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.Longitude)
                    .HasMaxLength(500)
                    .HasColumnName("longitude");
                entity.Property(e => e.ModelId).HasColumnName("ModelID");
                entity.Property(e => e.Name).HasMaxLength(500);
                entity.Property(e => e.Odomiter)
                    .HasMaxLength(500)
                    .HasColumnName("ODOMITER");
                entity.Property(e => e.PermitExphiryDate).HasColumnType("datetime");
                entity.Property(e => e.PostedDate).HasColumnType("datetime");
                entity.Property(e => e.Price).HasMaxLength(500);
                entity.Property(e => e.Rc).HasColumnName("RC");
                entity.Property(e => e.RegisterNumer).HasMaxLength(50);
                entity.Property(e => e.SittingCapsity)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.StateId).HasColumnName("StateID");
                entity.Property(e => e.Status).HasColumnName("status");
                entity.Property(e => e.SubCategoryId).HasColumnName("SubCategoryID");
                entity.Property(e => e.TaxValidityDate).HasColumnType("datetime");
                entity.Property(e => e.TotalBid).HasDefaultValue(0);
                entity.Property(e => e.VarietId).HasColumnName("varietID");
                entity.Property(e => e.VehicleType).HasMaxLength(500);
            });

            modelBuilder.Entity<ExpertContent>(entity =>
            {
                entity.ToTable("ExpertContent");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Audiourl).HasMaxLength(500);
                entity.Property(e => e.Img)
                    .HasMaxLength(500)
                    .HasColumnName("img");
                entity.Property(e => e.Pointid).HasColumnName("pointid");
                entity.Property(e => e.Videourl).HasMaxLength(500);
            });

            modelBuilder.Entity<ExpertPage>(entity =>
            {
                entity.ToTable("ExpertPage");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");
                entity.Property(e => e.Discription).HasColumnType("text");
            });

            modelBuilder.Entity<Expertpoint>(entity =>
            {
                entity.ToTable("expertpoints");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Img)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("img");
                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FancyNumber>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__fancyNum__3213E83F28F42E5C");

                entity.ToTable("fancyNumber", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Cityid).HasColumnName("cityid");
                entity.Property(e => e.Districtid).HasColumnName("districtid");
                entity.Property(e => e.Fancynumber1)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("fancynumber");
                entity.Property(e => e.OpenFor)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("open_for");
                entity.Property(e => e.Pic)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("pic");
                entity.Property(e => e.Picdis)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("picdis");
                entity.Property(e => e.Price)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.Stateid).HasColumnName("stateid");
            });

            modelBuilder.Entity<FinaceRequirement>(entity =>
            {
                entity.ToTable("FinaceRequirement");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Conatct)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("conatct");
                entity.Property(e => e.Email)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("email");
                entity.Property(e => e.Name)
                    .HasMaxLength(512)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FreeOldVechileImage>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Discription).HasColumnType("text");
                entity.Property(e => e.Imagetype)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("imagetype");
                entity.Property(e => e.Url)
                    .HasColumnType("text")
                    .HasColumnName("URl");
                entity.Property(e => e.VechileId).HasColumnName("VechileID");

                entity.HasOne(d => d.Vechile).WithMany(p => p.FreeOldVechileImages)
                    .HasForeignKey(d => d.VechileId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_FreeOldVehicleImages_OldVehicle");
            });

            modelBuilder.Entity<FreeOldVehicle>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_FreeOldVehicle_1");

                entity.ToTable("FreeOldVehicle");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.BodyLenthId).HasColumnName("BodyLenthID");
                entity.Property(e => e.BodyType)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.BodyTypeId).HasColumnName("BodyTypeID");
                entity.Property(e => e.BrandId).HasColumnName("BrandID");
                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
                entity.Property(e => e.ChassieNumber).HasMaxLength(50);
                entity.Property(e => e.City).HasMaxLength(500);
                entity.Property(e => e.CityId).HasColumnName("CityID");
                entity.Property(e => e.Color).HasMaxLength(500);
                entity.Property(e => e.Emailid)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.FarstName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.FitnessExphiryDate).HasColumnType("datetime");
                entity.Property(e => e.Fule).HasMaxLength(500);
                entity.Property(e => e.InsurenceExphiryDate).HasColumnType("datetime");
                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(50)
                    .IsFixedLength()
                    .HasColumnName("ipaddress");
                entity.Property(e => e.IsoferedinBid).HasColumnName("isoferedinBid");
                entity.Property(e => e.LastName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("lastName");
                entity.Property(e => e.Lenth)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.ModelId).HasColumnName("ModelID");
                entity.Property(e => e.Name).HasMaxLength(500);
                entity.Property(e => e.Odomiter)
                    .HasMaxLength(500)
                    .HasColumnName("ODOMITER");
                entity.Property(e => e.PermitExphiryDate).HasColumnType("datetime");
                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.PostedDate).HasColumnType("datetime");
                entity.Property(e => e.Price).HasMaxLength(500);
                entity.Property(e => e.Rc).HasColumnName("RC");
                entity.Property(e => e.RegisterNumer).HasMaxLength(50);
                entity.Property(e => e.SittingCapsity)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.StateId).HasColumnName("StateID");
                entity.Property(e => e.Status).HasColumnName("status");
                entity.Property(e => e.SubCategoryId).HasColumnName("SubCategoryID");
                entity.Property(e => e.TaxValidityDate).HasColumnType("datetime");
                entity.Property(e => e.VarietId).HasColumnName("varietID");
                entity.Property(e => e.VehicleType).HasMaxLength(500);

                entity.HasOne(d => d.BodyLenth).WithMany(p => p.FreeOldVehicles)
                    .HasForeignKey(d => d.BodyLenthId)
                    .HasConstraintName("FK_Freeoldvehicle_BodyLengthTYpes");

                entity.HasOne(d => d.BodyTypeNavigation).WithMany(p => p.FreeOldVehicles)
                    .HasForeignKey(d => d.BodyTypeId)
                    .HasConstraintName("FK_Freeoldvehicle_BodyType");

                entity.HasOne(d => d.Brand).WithMany(p => p.FreeOldVehicles)
                    .HasForeignKey(d => d.BrandId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Freeoldvehicle_Brands");

                entity.HasOne(d => d.Model).WithMany(p => p.FreeOldVehicles)
                    .HasForeignKey(d => d.ModelId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Freeoldvehicle_Moldes");

                entity.HasOne(d => d.State).WithMany(p => p.FreeOldVehicles)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_Freeoldvehicle_States");

                entity.HasOne(d => d.SubCategory).WithMany(p => p.FreeOldVehicles)
                    .HasForeignKey(d => d.SubCategoryId)
                    .HasConstraintName("FK_Freeoldvehicle_SubCatagory");

                entity.HasOne(d => d.Variet).WithMany(p => p.FreeOldVehicles)
                    .HasForeignKey(d => d.VarietId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Freeoldvehicle_Varients");
            });

            modelBuilder.Entity<FreeOldVehiclenew>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_FreeOldVehicle");

                entity.ToTable("FreeOldVehiclenew", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.BodyLenthId).HasColumnName("BodyLenthID");
                entity.Property(e => e.BodyType)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.BodyTypeId).HasColumnName("BodyTypeID");
                entity.Property(e => e.BrandId).HasColumnName("BrandID");
                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
                entity.Property(e => e.ChassieNumber).HasMaxLength(50);
                entity.Property(e => e.City).HasMaxLength(500);
                entity.Property(e => e.CityId).HasColumnName("CityID");
                entity.Property(e => e.Color).HasMaxLength(500);
                entity.Property(e => e.Emailid)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.FarstName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.FitnessExphiryDate).HasColumnType("datetime");
                entity.Property(e => e.Fule).HasMaxLength(500);
                entity.Property(e => e.InsurenceExphiryDate).HasColumnType("datetime");
                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(50)
                    .IsFixedLength()
                    .HasColumnName("ipaddress");
                entity.Property(e => e.IsoferedinBid).HasColumnName("isoferedinBid");
                entity.Property(e => e.LastName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("lastName");
                entity.Property(e => e.Lenth)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.ModelId).HasColumnName("ModelID");
                entity.Property(e => e.Name).HasMaxLength(500);
                entity.Property(e => e.Odomiter)
                    .HasMaxLength(500)
                    .HasColumnName("ODOMITER");
                entity.Property(e => e.PermitExphiryDate).HasColumnType("datetime");
                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.PostedDate).HasColumnType("datetime");
                entity.Property(e => e.Price).HasMaxLength(500);
                entity.Property(e => e.Rc).HasColumnName("RC");
                entity.Property(e => e.RegisterNumer).HasMaxLength(50);
                entity.Property(e => e.SittingCapsity)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.Status).HasColumnName("status");
                entity.Property(e => e.SubCategoryId).HasColumnName("SubCategoryID");
                entity.Property(e => e.TaxValidityDate).HasColumnType("datetime");
                entity.Property(e => e.VarietId).HasColumnName("varietID");
                entity.Property(e => e.VehicleType).HasMaxLength(500);
            });

            modelBuilder.Entity<HomepageVehcile>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__homepage__3214EC2772B1A8E3");

                entity.ToTable("homepageVehcile", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Categoryid).HasColumnName("CATEGORYID");
                entity.Property(e => e.Createdate).HasColumnName("createdate");
                entity.Property(e => e.Vehicleid).HasColumnName("VEHICLEID");

                entity.HasOne(d => d.Category).WithMany(p => p.HomepageVehciles)
                    .HasForeignKey(d => d.Categoryid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HomepageVehicles_VehicleTypes");
            });

            modelBuilder.Entity<Homepagecomaprevec>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__homepage__3213E83FC50CC399");

                entity.ToTable("homepagecomaprevec", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Comaprevehciles)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("comaprevehciles");
                entity.Property(e => e.Displayrefvecid)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("displayrefvecid");
                entity.Property(e => e.Displayvecid)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("displayvecid");
                entity.Property(e => e.Istdate)
                    .HasColumnType("datetime")
                    .HasColumnName("istdate");
                entity.Property(e => e.Status).HasColumnName("status");
                entity.Property(e => e.Utcdate)
                    .HasColumnType("datetime")
                    .HasColumnName("utcdate");
                entity.Property(e => e.Vehileid).HasColumnName("vehileid");
            });

            modelBuilder.Entity<Homepageshowcase>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__homepage__3213E83F4C144DE2");

                entity.ToTable("homepageshowcase", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Imageid).HasColumnName("imageid");
                entity.Property(e => e.Ist)
                    .HasColumnType("datetime")
                    .HasColumnName("IST");
                entity.Property(e => e.Kindid).HasColumnName("kindid");
                entity.Property(e => e.Status).HasColumnName("status");
                entity.Property(e => e.Utc)
                    .HasColumnType("datetime")
                    .HasColumnName("UTC");
                entity.Property(e => e.Vehicleid).HasColumnName("vehicleid");
            });

            modelBuilder.Entity<Importanceofinsurence>(entity =>
            {
                entity.ToTable("Importanceofinsurence");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");
                entity.Property(e => e.Addingdetail)
                    .HasColumnType("text")
                    .HasColumnName("ADDINGDETAIL");
                entity.Property(e => e.Cancellationofinsurance).HasColumnType("text");
                entity.Property(e => e.Claimprocedure).HasColumnType("text");
                entity.Property(e => e.Companiesname)
                    .HasColumnType("text")
                    .HasColumnName("COMPANIESNAME");
                entity.Property(e => e.Covernote)
                    .HasColumnType("text")
                    .HasColumnName("covernote");
                entity.Property(e => e.Depreciationslab)
                    .HasColumnType("text")
                    .HasColumnName("DEPRECIATIONSLAB");
                entity.Property(e => e.Descriptionpolicy)
                    .HasColumnType("text")
                    .HasColumnName("DESCRIPTIONPOLICY");
                entity.Property(e => e.Factorspremium).HasColumnType("text");
                entity.Property(e => e.Hypothecation)
                    .HasColumnType("text")
                    .HasColumnName("hypothecation");
                entity.Property(e => e.Importanceofirda)
                    .HasColumnType("text")
                    .HasColumnName("IMPORTANCEOFIRDA");
                entity.Property(e => e.Neccesity).HasColumnType("text");
                entity.Property(e => e.Noclaimbonus).HasColumnType("text");
                entity.Property(e => e.Personalaccident).HasColumnType("text");
                entity.Property(e => e.Risksnotcover)
                    .HasColumnType("text")
                    .HasColumnName("RISKSNOTCOVER");
            });

            modelBuilder.Entity<IndiainCity>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.AccentCity)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Latitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Longitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Population)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Region)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Stateid).HasColumnName("stateid");
            });

            modelBuilder.Entity<InsurenseRequirement>(entity =>
            {
                entity.ToTable("InsurenseRequirement");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Amount)
                    .HasMaxLength(512)
                    .IsUnicode(false);
                entity.Property(e => e.ContactNumber)
                    .HasMaxLength(512)
                    .IsUnicode(false);
                entity.Property(e => e.Email)
                    .HasMaxLength(512)
                    .IsUnicode(false);
                entity.Property(e => e.HaveInsurense).HasColumnName("haveInsurense");
                entity.Property(e => e.Name)
                    .HasMaxLength(512)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Jugad>(entity =>
            {
                entity.ToTable("jugad");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.ViedoUrl)
                    .HasMaxLength(500)
                    .IsFixedLength();
            });

            modelBuilder.Entity<LandinglatestVec>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__landingl__3213E83FD577F5FC");

                entity.ToTable("landinglatestVec", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Istdate)
                    .HasDefaultValueSql("(dateadd(minute,(330),getutcdate()))")
                    .HasColumnName("istdate");
                entity.Property(e => e.Status).HasColumnName("status");
                entity.Property(e => e.Utcdate)
                    .HasDefaultValueSql("(getutcdate())")
                    .HasColumnName("utcdate");
                entity.Property(e => e.Vehcileid).HasColumnName("vehcileid");

                entity.HasOne(d => d.Image).WithMany(p => p.LandinglatestVecs)
                    .HasForeignKey(d => d.Imageid)
                    .HasConstraintName("FK_landinglatestVec_VechileImages");

                entity.HasOne(d => d.Vehcile).WithMany(p => p.LandinglatestVecs)
                    .HasForeignKey(d => d.Vehcileid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_landinglatestVec_NewVehicle");
            });

            modelBuilder.Entity<LengthType>(entity =>
            {
                entity.ToTable("LengthType");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.BodyLength)
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.Property(e => e.MessageId).HasColumnName("MessageID");
                entity.Property(e => e.Date)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.EmptyMessage).HasMaxLength(50);
                entity.Property(e => e.Message1)
                    .HasMaxLength(50)
                    .HasColumnName("Message");
            });

            modelBuilder.Entity<MigrationHistory>(entity =>
            {
                entity.HasKey(e => e.MigrationId);

                entity.ToTable("__MigrationHistory");

                entity.Property(e => e.MigrationId).HasMaxLength(150);
                entity.Property(e => e.ContextKey)
                    .IsRequired()
                    .HasMaxLength(300);
                entity.Property(e => e.Model).IsRequired();
                entity.Property(e => e.ProductVersion)
                    .IsRequired()
                    .HasMaxLength(32);
            });

            modelBuilder.Entity<NeWvehicleFeature>(entity =>
            {
                entity.ToTable("NeWVehicleFEATURES");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Alloywheel)
                    .HasMaxLength(500)
                    .HasColumnName("ALLOYWHEEL");
                entity.Property(e => e.Colour)
                    .HasMaxLength(500)
                    .HasColumnName("COLOUR");
                entity.Property(e => e.Description)
                    .HasMaxLength(4000)
                    .HasColumnName("DESCRIPTION");
                entity.Property(e => e.Enginecapacity)
                    .HasMaxLength(500)
                    .HasColumnName("ENGINECAPACITY");
                entity.Property(e => e.Fueltype)
                    .HasMaxLength(500)
                    .HasColumnName("FUELTYPE");
                entity.Property(e => e.Mileage)
                    .HasMaxLength(500)
                    .HasColumnName("MILEAGE");
                entity.Property(e => e.VehicleId).HasColumnName("VehicleID");

                entity.HasOne(d => d.Vehicle).WithMany(p => p.NeWvehicleFeatures)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_NewVehicleFeature_NewVehicles");
            });

            modelBuilder.Entity<Nessistynsurence>(entity =>
            {
                entity.ToTable("Nessistynsurence");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");
                entity.Property(e => e.Alternumber)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("alternumber");
                entity.Property(e => e.BarndId).HasColumnName("BarndID");
                entity.Property(e => e.CityId).HasColumnName("CityID");
                entity.Property(e => e.Email)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.Isrenew).HasColumnName("ISRenew");
                entity.Property(e => e.Mobile)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.PolicyExphiryDate).HasColumnType("datetime");
                entity.Property(e => e.RegisterationNumber)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.UserName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.VehicleSubtypeId).HasColumnName("vehicleSubtypeID");
                entity.Property(e => e.VehicletypeId).HasColumnName("vehicletypeID");

                entity.HasOne(d => d.Barnd).WithMany(p => p.Nessistynsurences)
                    .HasForeignKey(d => d.BarndId)
                    .HasConstraintName("FK_Nessistynsurence_Brands");

                entity.HasOne(d => d.City).WithMany(p => p.Nessistynsurences)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Nessistynsurence_Citys");

                entity.HasOne(d => d.Model).WithMany(p => p.Nessistynsurences)
                    .HasForeignKey(d => d.ModelId)
                    .HasConstraintName("FK_Nessistynsurence_Models");

                entity.HasOne(d => d.VehicleSubtype).WithMany(p => p.Nessistynsurences)
                    .HasForeignKey(d => d.VehicleSubtypeId)
                    .HasConstraintName("FK_Nessistynsurence_VehicleSubType");

                entity.HasOne(d => d.Vehicletype).WithMany(p => p.Nessistynsurences)
                    .HasForeignKey(d => d.VehicletypeId)
                    .HasConstraintName("FK_Nessistynsurence_VehicleType");
            });

            modelBuilder.Entity<NewVecAttrContent>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_NewVecAttrContent2");

                entity.ToTable("NewVecAttrContent", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");
                entity.Property(e => e.CatId).HasColumnName("CatID");
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(3000);
                entity.Property(e => e.Status).HasColumnName("status");
                entity.Property(e => e.SubAttributeId).HasColumnName("SubAttributeID");
                entity.Property(e => e.VehcileId).HasColumnName("VehcileID");

                entity.HasOne(d => d.Attribute).WithMany(p => p.NewVecAttrContents)
                    .HasForeignKey(d => d.AttributeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NewvecAttributesContent_NewVehcleAtributes");

                entity.HasOne(d => d.Cat).WithMany(p => p.NewVecAttrContents)
                    .HasForeignKey(d => d.CatId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NewvecAttributesContent_VehicleTypes");

                entity.HasOne(d => d.SubAttribute).WithMany(p => p.NewVecAttrContents)
                    .HasForeignKey(d => d.SubAttributeId)
                    .HasConstraintName("FK_NewvecAttributesContent_NewVehcleSubAtributes");

                entity.HasOne(d => d.Vehcile).WithMany(p => p.NewVecAttrContents)
                    .HasForeignKey(d => d.VehcileId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_NewVecAttrContent_NewVehicle");
            });

            modelBuilder.Entity<NewVecCompare>(entity =>
            {
                entity.ToTable("NewVecCompare");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.ModelId).HasColumnName("ModelID");
                entity.Property(e => e.VarietId).HasColumnName("VarietID");
                entity.Property(e => e.VehicleId).HasColumnName("VehicleID");

                entity.HasOne(d => d.Bran).WithMany(p => p.NewVecCompares)
                    .HasForeignKey(d => d.Branid)
                    .HasConstraintName("FK_NewVehcileCompare_Brand");

                entity.HasOne(d => d.Model).WithMany(p => p.NewVecCompares)
                    .HasForeignKey(d => d.ModelId)
                    .HasConstraintName("FK_NewVehicleCompare_Model");

                entity.HasOne(d => d.Variet).WithMany(p => p.NewVecCompares)
                    .HasForeignKey(d => d.VarietId)
                    .HasConstraintName("FK_NewVehicleCompare_VARIENT");

                entity.HasOne(d => d.Vehicle).WithMany(p => p.NewVecCompares)
                    .HasForeignKey(d => d.VehicleId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_NewVecComapre_NewVehicle");
            });

            modelBuilder.Entity<NewVehicle>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__NewVehic__3213E83F9BA5AE42");

                entity.ToTable("NewVehicle");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.BodyLenthId).HasColumnName("BodyLenthID");
                entity.Property(e => e.BodyTypeId).HasColumnName("BodyTypeID");
                entity.Property(e => e.BrandId).HasColumnName("BrandID");
                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
                entity.Property(e => e.CityId).HasColumnName("CityID");
                entity.Property(e => e.DealerlocationId).HasColumnName("DEALERLOcationID");
                entity.Property(e => e.DistricId).HasColumnName("DistricID");
                entity.Property(e => e.FeatureId).HasColumnName("FeatureID");
                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(50)
                    .IsFixedLength()
                    .HasColumnName("ipaddress");
                entity.Property(e => e.Isdiscontinue).HasColumnName("isdiscontinue");
                entity.Property(e => e.Islatest).HasColumnName("islatest");
                entity.Property(e => e.Ispopuler).HasColumnName("ispopuler");
                entity.Property(e => e.Isupcoming).HasColumnName("isupcoming");
                entity.Property(e => e.Latitude)
                    .HasMaxLength(500)
                    .HasColumnName("latitude");
                entity.Property(e => e.Launchdate)
                    .HasColumnType("datetime")
                    .HasColumnName("launchdate");
                entity.Property(e => e.Longitude)
                    .HasMaxLength(500)
                    .HasColumnName("longitude");
                entity.Property(e => e.MoidelId).HasColumnName("MoidelID");
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("name");
                entity.Property(e => e.Priceid).HasColumnName("PRICEID");
                entity.Property(e => e.SafityandconfortId).HasColumnName("safityandconfortID");
                entity.Property(e => e.Specificationsid).HasColumnName("SPECIFICATIONSID");
                entity.Property(e => e.StateId).HasColumnName("StateID");
                entity.Property(e => e.SubCategoryId).HasColumnName("SubCategoryID");
                entity.Property(e => e.VarietId).HasColumnName("VArietID");

                entity.HasOne(d => d.BodyLenth).WithMany(p => p.NewVehicles)
                    .HasForeignKey(d => d.BodyLenthId)
                    .HasConstraintName("FK_NewVehicle_BodyLength");

                entity.HasOne(d => d.BodyType).WithMany(p => p.NewVehicles)
                    .HasForeignKey(d => d.BodyTypeId)
                    .HasConstraintName("FK_NewVehicle_BodyType");

                entity.HasOne(d => d.Brand).WithMany(p => p.NewVehicles)
                    .HasForeignKey(d => d.BrandId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NewVehicle_Brands");

                entity.HasOne(d => d.Category).WithMany(p => p.NewVehicles)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_NewVehicle_VechileTypes");

                entity.HasOne(d => d.City).WithMany(p => p.NewVehicles)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_NewVehicle_City");

                entity.HasOne(d => d.Dealerlocation).WithMany(p => p.NewVehicles)
                    .HasForeignKey(d => d.DealerlocationId)
                    .HasConstraintName("FK_NewVehicle_DealerLocations");

                entity.HasOne(d => d.Distric).WithMany(p => p.NewVehicles)
                    .HasForeignKey(d => d.DistricId)
                    .HasConstraintName("FK_NewVehicle_Districts");

                entity.HasOne(d => d.Feature).WithMany(p => p.NewVehicles)
                    .HasForeignKey(d => d.FeatureId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_NewVehicle_NewVehicleFeatures");

                entity.HasOne(d => d.Moidel).WithMany(p => p.NewVehicles)
                    .HasForeignKey(d => d.MoidelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NewVehicle_VechileModel");

                entity.HasOne(d => d.Specifications).WithMany(p => p.NewVehicles)
                    .HasForeignKey(d => d.Specificationsid)
                    .HasConstraintName("FK_NewVehicle_NewVehicleSpefications");

                entity.HasOne(d => d.State).WithMany(p => p.NewVehicles)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_NewVehicle_State");

                entity.HasOne(d => d.SubCategory).WithMany(p => p.NewVehicles)
                    .HasForeignKey(d => d.SubCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NewVehicle_VechileSubType");

                entity.HasOne(d => d.Variet).WithMany(p => p.NewVehicles)
                    .HasForeignKey(d => d.VarietId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_NewVehicle_Variets");
            });

            modelBuilder.Entity<NewVehicleSpecification>(entity =>
            {
                entity.ToTable("NewVehicleSPECIFICATIONS");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Brakes)
                    .HasMaxLength(1000)
                    .HasColumnName("BRAKES");
                entity.Property(e => e.Electrical)
                    .HasMaxLength(1000)
                    .HasColumnName("ELECTRICAL");
                entity.Property(e => e.Engine)
                    .HasMaxLength(1000)
                    .HasColumnName("ENGINE");
                entity.Property(e => e.Suspension)
                    .HasMaxLength(1000)
                    .HasColumnName("SUSPENSION");
                entity.Property(e => e.Transmission)
                    .HasMaxLength(1000)
                    .HasColumnName("TRANSMISSION");
                entity.Property(e => e.VechileId).HasColumnName("vechileID");
                entity.Property(e => e.Wheels)
                    .HasMaxLength(1000)
                    .HasColumnName("WHEELS");
            });

            modelBuilder.Entity<NewVehilcePrice>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__NewVehil__3213E83FDEC483A6");

                entity.ToTable("NewVehilcePrice");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.CityId).HasColumnName("CityID");
                entity.Property(e => e.CountryId).HasColumnName("CountryID");
                entity.Property(e => e.DistrictId).HasColumnName("DistrictID");
                entity.Property(e => e.Exshowrommprice).HasColumnName("exshowrommprice");
                entity.Property(e => e.Insuranceprice).HasColumnName("insuranceprice");
                entity.Property(e => e.Insurancetime).HasColumnName("insurancetime");
                entity.Property(e => e.Otherprice).HasColumnName("otherprice");
                entity.Property(e => e.Rtoprice).HasColumnName("rtoprice");
                entity.Property(e => e.Rtopricepercentage).HasColumnName("rtopricepercentage");
                entity.Property(e => e.StateId).HasColumnName("StateID");
                entity.Property(e => e.VehicleId).HasColumnName("VehicleID");

                entity.HasOne(d => d.Country).WithMany(p => p.NewVehilcePrices)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_NewVehiclePrice_Country");

                entity.HasOne(d => d.District).WithMany(p => p.NewVehilcePrices)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_NewVehiclePrice_Distric");

                entity.HasOne(d => d.State).WithMany(p => p.NewVehilcePrices)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_NewVehiclePrice_States");

                entity.HasOne(d => d.Vehicle).WithMany(p => p.NewVehilcePrices)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_NewVehiclePrice_City");
            });

            modelBuilder.Entity<NewvecAttribute>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__NewvecAt__3214EC276B78D061");

                entity.ToTable("NewvecAttributes", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.AttributeName).HasMaxLength(3000);
                entity.Property(e => e.CatId).HasColumnName("CatID");
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.Disyplayorder).HasColumnName("disyplayorder");
                entity.Property(e => e.HasAttribute).HasColumnName("hasAttribute");
                entity.Property(e => e.Status).HasColumnName("status");

                entity.HasOne(d => d.Cat).WithMany(p => p.NewvecAttributes)
                    .HasForeignKey(d => d.CatId)
                    .HasConstraintName("FK_NewvecAttributes_VehicleTypes");
            });

            modelBuilder.Entity<NewvecSubAttribute>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");
                entity.Property(e => e.Catid).HasColumnName("catid");
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.SubAttCatId).HasColumnName("SubAttCatID");
                entity.Property(e => e.SubAttributeName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.Attribute).WithMany(p => p.NewvecSubAttributes)
                    .HasForeignKey(d => d.AttributeId)
                    .HasConstraintName("FK_NewvecSubAttributes_Attributes");

                entity.HasOne(d => d.Cat).WithMany(p => p.NewvecSubAttributes)
                    .HasForeignKey(d => d.Catid)
                    .HasConstraintName("FK_NewvecSubAttributes_VehicleTypes");

                entity.HasOne(d => d.SubAttCat).WithMany(p => p.NewvecSubAttributes)
                    .HasForeignKey(d => d.SubAttCatId)
                    .HasConstraintName("FK_NewvecSubAttributes_NewvecSubAttributesCategory");
            });

            modelBuilder.Entity<NewvecSubAttributesCategory>(entity =>
            {
                entity.ToTable("NewvecSubAttributesCategory");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.CatId).HasColumnName("CatID");
                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.Attribut).WithMany(p => p.NewvecSubAttributesCategories)
                    .HasForeignKey(d => d.Attributid)
                    .HasConstraintName("FK_NewvecSubAttributesCategory_NewVecAttribuites");

                entity.HasOne(d => d.Cat).WithMany(p => p.NewvecSubAttributesCategories)
                    .HasForeignKey(d => d.CatId)
                    .HasConstraintName("FK_NewvecSubAttributesCategory_VehecleTypes");
            });

            modelBuilder.Entity<Newvehicle1>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__newvehic__3213E83F62AA360E");

                entity.ToTable("newvehicle1");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.BodyLenthId).HasColumnName("BodyLenthID");
                entity.Property(e => e.BodyTypeId).HasColumnName("BodyTypeID");
                entity.Property(e => e.BrandId).HasColumnName("BrandID");
                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
                entity.Property(e => e.CityId).HasColumnName("CityID");
                entity.Property(e => e.DealerlocationId).HasColumnName("DEALERLOcationID");
                entity.Property(e => e.DistricId).HasColumnName("DistricID");
                entity.Property(e => e.FeatureId).HasColumnName("FeatureID");
                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(50)
                    .IsFixedLength()
                    .HasColumnName("ipaddress");
                entity.Property(e => e.Isdiscontinue).HasColumnName("isdiscontinue");
                entity.Property(e => e.Islatest).HasColumnName("islatest");
                entity.Property(e => e.Ispopuler).HasColumnName("ispopuler");
                entity.Property(e => e.Isupcoming).HasColumnName("isupcoming");
                entity.Property(e => e.Latitude)
                    .HasMaxLength(500)
                    .HasColumnName("latitude");
                entity.Property(e => e.Launchdate)
                    .HasColumnType("datetime")
                    .HasColumnName("launchdate");
                entity.Property(e => e.Longitude)
                    .HasMaxLength(500)
                    .HasColumnName("longitude");
                entity.Property(e => e.MoidelId).HasColumnName("MoidelID");
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("name");
                entity.Property(e => e.Priceid).HasColumnName("PRICEID");
                entity.Property(e => e.SafityandconfortId).HasColumnName("safityandconfortID");
                entity.Property(e => e.Specificationsid).HasColumnName("SPECIFICATIONSID");
                entity.Property(e => e.StateId).HasColumnName("StateID");
                entity.Property(e => e.SubCategoryId).HasColumnName("SubCategoryID");
                entity.Property(e => e.VarietId).HasColumnName("VArietID");

                entity.HasOne(d => d.BodyLenth).WithMany(p => p.Newvehicle1s)
                    .HasForeignKey(d => d.BodyLenthId)
                    .HasConstraintName("FK_newvehicle1_BodyLength");

                entity.HasOne(d => d.BodyType).WithMany(p => p.Newvehicle1s)
                    .HasForeignKey(d => d.BodyTypeId)
                    .HasConstraintName("FK_newvehicle1_BodyType");

                entity.HasOne(d => d.City).WithMany(p => p.Newvehicle1s)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_newvehicle1_City");

                entity.HasOne(d => d.Dealerlocation).WithMany(p => p.Newvehicle1s)
                    .HasForeignKey(d => d.DealerlocationId)
                    .HasConstraintName("FK_newvehicle1_DealerLocations");

                entity.HasOne(d => d.Distric).WithMany(p => p.Newvehicle1s)
                    .HasForeignKey(d => d.DistricId)
                    .HasConstraintName("FK_newvehicle1_Districts");

                entity.HasOne(d => d.Moidel).WithMany(p => p.Newvehicle1s)
                    .HasForeignKey(d => d.MoidelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_newvehicle1_VechileModel");

                entity.HasOne(d => d.State).WithMany(p => p.Newvehicle1s)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_newvehicle1_State");

                entity.HasOne(d => d.Variet).WithMany(p => p.Newvehicle1s)
                    .HasForeignKey(d => d.VarietId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_newvehicle1_Variets");
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.ToTable("Notification");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Isreard).HasColumnName("isreard");
                entity.Property(e => e.Notificationcode)
                    .HasMaxLength(500)
                    .HasColumnName("notificationcode");
                entity.Property(e => e.Userid)
                    .HasMaxLength(128)
                    .HasColumnName("userid");
                entity.Property(e => e.UserroleId)
                    .HasMaxLength(128)
                    .HasColumnName("userroleId");

                entity.HasOne(d => d.User).WithMany(p => p.Notifications)
                    .HasForeignKey(d => d.Userid)
                    .HasConstraintName("FK_Notifications_User");

                entity.HasOne(d => d.Userrole).WithMany(p => p.Notifications)
                    .HasForeignKey(d => d.UserroleId)
                    .HasConstraintName("FK_Notifications_UserRoles");
            });

            modelBuilder.Entity<OfferBid>(entity =>
            {
                entity.ToTable("OfferBid");

                entity.Property(e => e.BidId).HasColumnName("bidID");
                entity.Property(e => e.BidStatus).HasColumnName("bidStatus");
                entity.Property(e => e.Bidremarks)
                    .HasColumnType("text")
                    .HasColumnName("bidremarks");
                entity.Property(e => e.Enddatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("enddatetime");
                entity.Property(e => e.Isopen).HasColumnName("ISOpen");
                entity.Property(e => e.MaxPrice).HasColumnName("MAxPrice");
                entity.Property(e => e.MaxbidQuantity).HasColumnName("MAxbidQuantity");
                entity.Property(e => e.PostedDate).HasColumnType("datetime");
                entity.Property(e => e.StartDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("startDatetime");
                entity.Property(e => e.UserId)
                    .HasMaxLength(128)
                    .HasColumnName("userId");
            });

            modelBuilder.Entity<OfflineVehicleMessage>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__OfflineV__3213E83FC941E792");

                entity.ToTable("OfflineVehicleMessages", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Chat).HasColumnName("chat");
                entity.Property(e => e.Username)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<OldVechileImage>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Discription).HasColumnType("text");
                entity.Property(e => e.Imagetype)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("imagetype");
                entity.Property(e => e.Url)
                    .HasColumnType("text")
                    .HasColumnName("URl");
                entity.Property(e => e.VechileId).HasColumnName("VechileID");

                entity.HasOne(d => d.Vechile).WithMany(p => p.OldVechileImages)
                    .HasForeignKey(d => d.VechileId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OldVehicleImages_OldVehicle");
            });

            modelBuilder.Entity<OldVechileImages1>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("OldVechileImages1");

                entity.Property(e => e.Discription).HasColumnType("text");
                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");
                entity.Property(e => e.Imagetype)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("imagetype");
                entity.Property(e => e.Url)
                    .HasColumnType("text")
                    .HasColumnName("URl");
                entity.Property(e => e.VechileId).HasColumnName("VechileID");
            });

            modelBuilder.Entity<OldVehicle>(entity =>
            {
                entity.ToTable("OldVehicle");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.BodyLenthId).HasColumnName("BodyLenthID");
                entity.Property(e => e.BodyType)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.BodyTypeId).HasColumnName("BodyTypeID");
                entity.Property(e => e.BrandId).HasColumnName("BrandID");
                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
                entity.Property(e => e.ChassieNumber).HasMaxLength(50);
                entity.Property(e => e.City).HasMaxLength(500);
                entity.Property(e => e.CityId).HasColumnName("CityID");
                entity.Property(e => e.Color).HasMaxLength(500);
                entity.Property(e => e.DistricId).HasColumnName("DistricID");
                entity.Property(e => e.FitnessExphiryDate).HasColumnType("datetime");
                entity.Property(e => e.Fule).HasMaxLength(500);
                entity.Property(e => e.InsurenceExphiryDate).HasColumnType("datetime");
                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(50)
                    .IsFixedLength()
                    .HasColumnName("ipaddress");
                entity.Property(e => e.IsoferedinBid).HasColumnName("isoferedinBid");
                entity.Property(e => e.IsoferedinBidconfirmed).HasColumnName("isoferedinBidconfirmed");
                entity.Property(e => e.Ispopuler).HasColumnName("ispopuler");
                entity.Property(e => e.Isscarp).HasColumnName("ISScarp");
                entity.Property(e => e.IsurgentSale).HasColumnName("ISUrgentSale");
                entity.Property(e => e.Latitude)
                    .HasMaxLength(500)
                    .HasColumnName("latitude");
                entity.Property(e => e.Lenth)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.Longitude)
                    .HasMaxLength(500)
                    .HasColumnName("longitude");
                entity.Property(e => e.ModelId).HasColumnName("ModelID");
                entity.Property(e => e.Name).HasMaxLength(500);
                entity.Property(e => e.Odomiter)
                    .HasMaxLength(500)
                    .HasColumnName("ODOMITER");
                entity.Property(e => e.PermitExphiryDate).HasColumnType("datetime");
                entity.Property(e => e.PostedByUserId)
                    .HasMaxLength(128)
                    .HasColumnName("PostedByUserID");
                entity.Property(e => e.PostedDate).HasColumnType("datetime");
                entity.Property(e => e.Price).HasDefaultValue(0.0);
                entity.Property(e => e.Rc).HasColumnName("RC");
                entity.Property(e => e.RegisterNumer).HasMaxLength(50);
                entity.Property(e => e.SittingCapsity)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.StateId).HasColumnName("StateID");
                entity.Property(e => e.Status).HasColumnName("status");
                entity.Property(e => e.SubCategoryId).HasColumnName("SubCategoryID");
                entity.Property(e => e.TaxValidityDate).HasColumnType("datetime");
                entity.Property(e => e.VarietId).HasColumnName("varietID");
                entity.Property(e => e.VehicleType).HasMaxLength(500);

                entity.HasOne(d => d.Category).WithMany(p => p.OldVehicles)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_OldVehicle_VType");

                entity.HasOne(d => d.CityNavigation).WithMany(p => p.OldVehicles)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_OldVehicle_City");

                entity.HasOne(d => d.Distric).WithMany(p => p.OldVehicles)
                    .HasForeignKey(d => d.DistricId)
                    .HasConstraintName("FK_OldVehicle_Distric");

                entity.HasOne(d => d.Model).WithMany(p => p.OldVehicles)
                    .HasForeignKey(d => d.ModelId)
                    .HasConstraintName("FK_OldVehicle_VModel");

                entity.HasOne(d => d.State).WithMany(p => p.OldVehicles)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_OldVehicle_State");

                entity.HasOne(d => d.SubCategory).WithMany(p => p.OldVehicles)
                    .HasForeignKey(d => d.SubCategoryId)
                    .HasConstraintName("FK_OldVehiclet_SubCatTypes");
            });

            modelBuilder.Entity<OldVehicle1>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("OldVehicle1");

                entity.Property(e => e.BodyLenthId).HasColumnName("BodyLenthID");
                entity.Property(e => e.BodyType)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.BodyTypeId).HasColumnName("BodyTypeID");
                entity.Property(e => e.BrandId).HasColumnName("BrandID");
                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
                entity.Property(e => e.ChassieNumber).HasMaxLength(50);
                entity.Property(e => e.City).HasMaxLength(500);
                entity.Property(e => e.CityId).HasColumnName("CityID");
                entity.Property(e => e.Color).HasMaxLength(500);
                entity.Property(e => e.DistricId).HasColumnName("DistricID");
                entity.Property(e => e.FitnessExphiryDate).HasColumnType("datetime");
                entity.Property(e => e.Fule).HasMaxLength(500);
                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");
                entity.Property(e => e.InsurenceExphiryDate).HasColumnType("datetime");
                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(50)
                    .IsFixedLength()
                    .HasColumnName("ipaddress");
                entity.Property(e => e.IsoferedinBid).HasColumnName("isoferedinBid");
                entity.Property(e => e.Isscarp).HasColumnName("ISScarp");
                entity.Property(e => e.IsurgentSale).HasColumnName("ISUrgentSale");
                entity.Property(e => e.Latitude)
                    .HasMaxLength(500)
                    .HasColumnName("latitude");
                entity.Property(e => e.Lenth)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.Longitude)
                    .HasMaxLength(500)
                    .HasColumnName("longitude");
                entity.Property(e => e.ModelId).HasColumnName("ModelID");
                entity.Property(e => e.Name).HasMaxLength(500);
                entity.Property(e => e.Odomiter)
                    .HasMaxLength(500)
                    .HasColumnName("ODOMITER");
                entity.Property(e => e.PermitExphiryDate).HasColumnType("datetime");
                entity.Property(e => e.PostedByUserId)
                    .HasMaxLength(128)
                    .HasColumnName("PostedByUserID");
                entity.Property(e => e.PostedDate).HasColumnType("datetime");
                entity.Property(e => e.Price).HasMaxLength(500);
                entity.Property(e => e.Rc).HasColumnName("RC");
                entity.Property(e => e.RegisterNumer).HasMaxLength(50);
                entity.Property(e => e.SittingCapsity)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.StateId).HasColumnName("StateID");
                entity.Property(e => e.Status).HasColumnName("status");
                entity.Property(e => e.SubCategoryId).HasColumnName("SubCategoryID");
                entity.Property(e => e.TaxValidityDate).HasColumnType("datetime");
                entity.Property(e => e.VarietId).HasColumnName("varietID");
                entity.Property(e => e.VehicleType).HasMaxLength(500);
            });

            modelBuilder.Entity<OldVehicleBid>(entity =>
            {
                entity.ToTable("OldVehicleBid");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.CloseIstdate).HasColumnName("CloseISTdate");
                entity.Property(e => e.ClosedUtcdate).HasColumnName("ClosedUTCdate");
                entity.Property(e => e.EndIstdate).HasColumnName("EndISTDate");
                entity.Property(e => e.EndUtcdate).HasColumnName("EndUTCDate");
                entity.Property(e => e.PostedIstdate).HasColumnName("PostedISTDate");
                entity.Property(e => e.PostedUtcdate).HasColumnName("PostedUTCDate");
                entity.Property(e => e.StartIstdate).HasColumnName("StartISTDate");
                entity.Property(e => e.StartUtcdate).HasColumnName("StartUTCDate");
            });

            modelBuilder.Entity<OtpLog>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__OtpLog__3213E83F351EFF08");

                entity.ToTable("OtpLog", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Email)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.GenrateItc)
                    .HasColumnType("datetime")
                    .HasColumnName("GenrateITC");
                entity.Property(e => e.GenrateUtc)
                    .HasColumnType("datetime")
                    .HasColumnName("GenrateUTC");
                entity.Property(e => e.Host)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("host");
                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.Otp)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("OTP");
                entity.Property(e => e.Phone)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("phone");
                entity.Property(e => e.Userid)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.Validitytime).HasColumnName("validitytime");
            });

            modelBuilder.Entity<PostRequirement>(entity =>
            {
                entity.ToTable("PostRequirement");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.BrandId).HasColumnName("BrandID");
                entity.Property(e => e.CategoryId).HasColumnName("categoryID");
                entity.Property(e => e.City)
                    .HasMaxLength(512)
                    .IsUnicode(false);
                entity.Property(e => e.Contact)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("contact");
                entity.Property(e => e.Email)
                    .HasMaxLength(512)
                    .IsUnicode(false);
                entity.Property(e => e.FinaceBudget)
                    .HasMaxLength(512)
                    .IsUnicode(false);
                entity.Property(e => e.FinaceCity)
                    .HasMaxLength(512)
                    .IsUnicode(false);
                entity.Property(e => e.FinanceContact)
                    .HasMaxLength(512)
                    .IsUnicode(false);
                entity.Property(e => e.FinanceEmail)
                    .HasMaxLength(512)
                    .IsUnicode(false);
                entity.Property(e => e.FinanceName)
                    .HasMaxLength(512)
                    .IsUnicode(false);
                entity.Property(e => e.FirstName)
                    .HasMaxLength(512)
                    .IsUnicode(false);
                entity.Property(e => e.InsuranceCompnayContact)
                    .HasMaxLength(512)
                    .IsUnicode(false);
                entity.Property(e => e.InsuranceCompnayEmail)
                    .HasMaxLength(512)
                    .IsUnicode(false);
                entity.Property(e => e.InsuranceCompnayName)
                    .HasMaxLength(512)
                    .IsUnicode(false);
                entity.Property(e => e.IsInsurance).HasColumnName("isInsurance");
                entity.Property(e => e.LastName)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("lastName");
                entity.Property(e => e.ModelId).HasColumnName("ModelID");
                entity.Property(e => e.PurchaseDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Purchasehistory>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__purchase__3213E83F8DB83171");

                entity.ToTable("purchasehistory", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Amount).HasColumnType("decimal(16, 2)");
                entity.Property(e => e.IstDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("istDatetime");
                entity.Property(e => e.Itemname)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("itemname");
                entity.Property(e => e.Transectionid)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("transectionid");
                entity.Property(e => e.Username)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("username");
                entity.Property(e => e.UtcDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Request>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Message).HasMaxLength(4000);
                entity.Property(e => e.Status).HasColumnName("status");
                entity.Property(e => e.UserRoleId).HasColumnName("UserRoleID");
            });

            modelBuilder.Entity<Rtafile>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RTAFile__3213E83FA96A371D");

                entity.ToTable("RTAFile", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.FileDiscription).HasMaxLength(4000);
                entity.Property(e => e.FileName).HasMaxLength(4000);
            });

            modelBuilder.Entity<RtafileDocument>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RTAFileD__3213E83FC6EEABF7");

                entity.ToTable("RTAFileDocument", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Audio).HasMaxLength(4000);
                entity.Property(e => e.Discription).HasMaxLength(4000);
                entity.Property(e => e.DispayNumber).HasColumnName("dispayNumber");
                entity.Property(e => e.FileId).HasColumnName("FileID");
                entity.Property(e => e.Name)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
                entity.Property(e => e.Pic).HasMaxLength(4000);
                entity.Property(e => e.Video).HasMaxLength(4000);
            });

            modelBuilder.Entity<RtaofficeAddress>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RTAOffic__3213E83F469DE977");

                entity.ToTable("RTAOfficeAddress", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Address)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
                entity.Property(e => e.DistrictId).HasColumnName("DistrictID");
                entity.Property(e => e.Emailid)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.Phonenumber)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("phonenumber");
                entity.Property(e => e.Rtacode)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("RTAcode");
                entity.Property(e => e.StateId).HasColumnName("StateID");
            });

            modelBuilder.Entity<Safty>(entity =>
            {
                entity.ToTable("Safty");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Abs)
                    .HasMaxLength(500)
                    .HasColumnName("ABS");
                entity.Property(e => e.Ac)
                    .HasMaxLength(50)
                    .HasColumnName("AC");
                entity.Property(e => e.AdjustableDriverSeat).HasMaxLength(500);
                entity.Property(e => e.AirBrakes).HasMaxLength(500);
                entity.Property(e => e.BluetoothConnectivity).HasMaxLength(500);
                entity.Property(e => e.Cdplayer)
                    .HasMaxLength(500)
                    .HasColumnName("CDPlayer");
                entity.Property(e => e.CentralLocking).HasMaxLength(500);
                entity.Property(e => e.ChildSafetyLocks).HasMaxLength(500);
                entity.Property(e => e.DriverAirbag).HasMaxLength(500);
                entity.Property(e => e.FrontAxle).HasMaxLength(500);
                entity.Property(e => e.FrontBrakeType).HasMaxLength(500);
                entity.Property(e => e.FrontSuspension).HasMaxLength(500);
                entity.Property(e => e.LeatherSeats).HasMaxLength(500);
                entity.Property(e => e.PassengerAirbag).HasMaxLength(500);
                entity.Property(e => e.PowerSteering).HasMaxLength(500);
                entity.Property(e => e.RearAcvents)
                    .HasMaxLength(500)
                    .HasColumnName("RearACVents");
                entity.Property(e => e.RearAxle).HasMaxLength(500);
                entity.Property(e => e.RearBrakeType).HasMaxLength(500);
                entity.Property(e => e.RearCamera).HasMaxLength(500);
                entity.Property(e => e.RearSuspension).HasMaxLength(500);
                entity.Property(e => e.Seatbelts).HasMaxLength(500);
                entity.Property(e => e.Seattype).HasMaxLength(500);
                entity.Property(e => e.TubelessTyres).HasMaxLength(500);
                entity.Property(e => e.VehicleId).HasColumnName("VehicleID");

                entity.HasOne(d => d.Vehicle).WithMany(p => p.Safties)
                    .HasForeignKey(d => d.VehicleId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Safety_Vehicle");
            });

            modelBuilder.Entity<SellerType>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");
                entity.Property(e => e.Type).HasMaxLength(500);
            });

            modelBuilder.Entity<SellerVehicleType>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("SellerVehicleType");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
                entity.Property(e => e.OrgenstaionName).HasMaxLength(500);
                entity.Property(e => e.Typeid).HasMaxLength(500);
                entity.Property(e => e.Userid).HasMaxLength(128);
            });

            modelBuilder.Entity<Sendsm>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__sendsms__3214EC27592680F2");

                entity.ToTable("sendsms", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Email)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.Phonenumber)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.Record)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("record");
                entity.Property(e => e.SmsType)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<State>(entity =>
            {
                entity.Property(e => e.Latitude)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("latitude");
                entity.Property(e => e.Longirtude)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("longirtude");
                entity.Property(e => e.Oldrtacode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OLDRTACode");
                entity.Property(e => e.Pic)
                    .HasMaxLength(4000)
                    .HasColumnName("pic");
                entity.Property(e => e.Rtacode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("RTACode");
                entity.Property(e => e.StateName).IsRequired();

                entity.HasOne(d => d.Country).WithMany(p => p.States)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_State_Country");
            });

            modelBuilder.Entity<SubDistrict>(entity =>
            {
                entity.HasKey(e => e.SubDistrictsId);

                entity.Property(e => e.Latitude)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("latitude");
                entity.Property(e => e.Longitude)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("longitude");
                entity.Property(e => e.SubDistrictsName).IsRequired();

                entity.HasOne(d => d.District).WithMany(p => p.SubDistricts)
                    .HasForeignKey(d => d.DistrictId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_City_Distric");
            });

            modelBuilder.Entity<TblNotification>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__tbl_noti__3213E83F35EFAECE");

                entity.ToTable("tbl_notifications");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.CreatedById)
                    .HasMaxLength(500)
                    .HasColumnName("CreatedByID");
                entity.Property(e => e.DateTime).HasColumnType("datetime");
                entity.Property(e => e.EventCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.EventDetail)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.NotificationStatus).HasMaxLength(500);
                entity.Property(e => e.ReadStatus).HasMaxLength(500);
                entity.Property(e => e.ReadStatusSuperAdmin).HasMaxLength(500);
            });

            modelBuilder.Entity<UsersPin>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_UserPins");

                entity.ToTable("UsersPin");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.CreatedDate).HasColumnName("createdDate");
                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ipaddress");
                entity.Property(e => e.Pin).HasMaxLength(128);
                entity.Property(e => e.UserId)
                    .HasMaxLength(128)
                    .HasColumnName("userID");
            });

            modelBuilder.Entity<Variet>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.DisconnectedYear).HasColumnName("disconnectedYear");
                entity.Property(e => e.Isdisscontinued)
                    .HasDefaultValue(false)
                    .HasColumnName("isdisscontinued");
                entity.Property(e => e.ModelId).HasColumnName("ModelID");
                entity.Property(e => e.VarietName)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.HasOne(d => d.Model).WithMany(p => p.Variets)
                    .HasForeignKey(d => d.ModelId)
                    .HasConstraintName("FK_Models_Varients");
            });

            modelBuilder.Entity<Vechile>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.BrandId).HasColumnName("BrandID");
                entity.Property(e => e.BuyedDate).HasColumnType("datetime");
                entity.Property(e => e.BuyedPrice).HasColumnName("buyedPrice");
                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdDate");
                entity.Property(e => e.Disciption).HasColumnType("text");
                entity.Property(e => e.KindId).HasColumnName("KindID");
                entity.Property(e => e.ModelId).HasColumnName("ModelID");
                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.SubTypeId).HasColumnName("SubTypeID");
                entity.Property(e => e.TypeId).HasColumnName("TypeID");
                entity.Property(e => e.VinNo)
                    .HasMaxLength(50)
                    .HasColumnName("vinNo");
                entity.Property(e => e.Year)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Model).WithMany(p => p.Vechiles)
                    .HasForeignKey(d => d.ModelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vehicles_Models");

                entity.HasOne(d => d.SubType).WithMany(p => p.Vechiles)
                    .HasForeignKey(d => d.SubTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vehicles_VehicleSubTypes");

                entity.HasOne(d => d.Type).WithMany(p => p.Vechiles)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vehicles_VehicleTYpes");
            });

            modelBuilder.Entity<VechileCondition>(entity =>
            {
                entity.ToTable("VechileCondition");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Condition)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VechileImage>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Color)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.Discription).HasColumnType("text");
                entity.Property(e => e.Displayorder).HasColumnName("displayorder");
                entity.Property(e => e.Imagetype)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("imagetype");
                entity.Property(e => e.Url)
                    .HasColumnType("text")
                    .HasColumnName("URl");
                entity.Property(e => e.VechileId).HasColumnName("VechileID");

                entity.HasOne(d => d.Vechile).WithMany(p => p.VechileImages)
                    .HasForeignKey(d => d.VechileId)
                    .HasConstraintName("FK_VechileImages_NewVehicle");
            });

            modelBuilder.Entity<VechileKind>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__VechileK__3214EC270D784F6F");

                entity.ToTable("VechileKind", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<VechileModel>(entity =>
            {
                entity.ToTable("VechileModel");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.BrandId).HasColumnName("BrandID");
                entity.Property(e => e.DisconnectedYear).HasColumnName("disconnectedYear");
                entity.Property(e => e.Isdisscontinued)
                    .HasDefaultValue(false)
                    .HasColumnName("isdisscontinued");
                entity.Property(e => e.ModelName)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
                entity.Property(e => e.VsubtypeId).HasColumnName("VsubtypeID");
                entity.Property(e => e.VtypeId).HasColumnName("VtypeID");

                entity.HasOne(d => d.Brand).WithMany(p => p.VechileModels)
                    .HasForeignKey(d => d.BrandId)
                    .HasConstraintName("FK_VechileModel_Brands");

                entity.HasOne(d => d.Vsubtype).WithMany(p => p.VechileModels)
                    .HasForeignKey(d => d.VsubtypeId)
                    .HasConstraintName("FK_VechileModel_VechileSubType");

                entity.HasOne(d => d.Vtype).WithMany(p => p.VechileModels)
                    .HasForeignKey(d => d.VtypeId)
                    .HasConstraintName("FK_VechileModel_VechileTypes");
            });

            modelBuilder.Entity<VechileSizeConfiguration>(entity =>
            {
                entity.ToTable("VechileSizeConfiguration");

                entity.Property(e => e.DoorsCount).HasColumnName("doorsCount");
                entity.Property(e => e.Height).HasColumnName("height");
                entity.Property(e => e.Length).HasColumnName("length");
                entity.Property(e => e.TotalDoors).HasColumnName("totalDoors");
                entity.Property(e => e.Vid).HasColumnName("VID");
                entity.Property(e => e.Width).HasColumnName("width");
            });

            modelBuilder.Entity<VechileSubType>(entity =>
            {
                entity.ToTable("VechileSubType");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");
                entity.Property(e => e.Typeid).HasColumnName("typeid");

                entity.HasOne(d => d.Type).WithMany(p => p.VechileSubTypes)
                    .HasForeignKey(d => d.Typeid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_VechileSubType_VechileTypes");
            });

            modelBuilder.Entity<VechileType>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Image).IsUnicode(false);
                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");
                entity.Property(e => e.VechileKindId).HasColumnName("VechileKindID");

                entity.HasOne(d => d.VechileKind).WithMany(p => p.VechileTypes)
                    .HasForeignKey(d => d.VechileKindId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_VechileTypes_VechileKind");
            });

            modelBuilder.Entity<VehicleRequirement>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_PostVehicleRequirement");

                entity.ToTable("VehicleRequirement");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.BrandId).HasColumnName("brandId");
                entity.Property(e => e.CategoryId).HasColumnName("categoryId");
                entity.Property(e => e.CityId).HasColumnName("cityID");
                entity.Property(e => e.ContactNumber)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("contactNumber");
                entity.Property(e => e.DistrictId).HasColumnName("districtID");
                entity.Property(e => e.EmailId)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("emailID");
                entity.Property(e => e.FirstName)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("firstName");
                entity.Property(e => e.LastName)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("lastName");
                entity.Property(e => e.ModelId).HasColumnName("modelId");
                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("purchaseDate");
                entity.Property(e => e.StateId).HasColumnName("stateID");
                entity.Property(e => e.TypeId).HasColumnName("typeID");
                entity.Property(e => e.VarietId).HasColumnName("varietId");

                entity.HasOne(d => d.Brand).WithMany(p => p.VehicleRequirements)
                    .HasForeignKey(d => d.BrandId)
                    .HasConstraintName("FK_VehicleRequirement_Brands");

                entity.HasOne(d => d.City).WithMany(p => p.VehicleRequirements)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_VehicleRequirement_City");

                entity.HasOne(d => d.District).WithMany(p => p.VehicleRequirements)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_VehicleRequirement_Distric");

                entity.HasOne(d => d.Model).WithMany(p => p.VehicleRequirements)
                    .HasForeignKey(d => d.ModelId)
                    .HasConstraintName("FK_VehicleRequirement_VModel");

                entity.HasOne(d => d.State).WithMany(p => p.VehicleRequirements)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_VehicleRequirement_State");

                entity.HasOne(d => d.Type).WithMany(p => p.VehicleRequirements)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_VehicleRequirement_VType");

                entity.HasOne(d => d.Variet).WithMany(p => p.VehicleRequirements)
                    .HasForeignKey(d => d.VarietId)
                    .HasConstraintName("FK_VehicleRequirement_Varient");
            });

            modelBuilder.Entity<VisitorChat>(entity =>
            {
                entity.ToTable("VisitorChat");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Chatcontenttype)
                    .HasMaxLength(500)
                    .IsFixedLength()
                    .HasColumnName("chatcontenttype");
                entity.Property(e => e.Chatpath)
                    .HasMaxLength(4000)
                    .HasColumnName("chatpath");
                entity.Property(e => e.LastSeenreciver)
                    .HasColumnType("datetime")
                    .HasColumnName("lastSeenreciver");
                entity.Property(e => e.Lastseenvisitr)
                    .HasColumnType("datetime")
                    .HasColumnName("lastseenvisitr");
                entity.Property(e => e.ReciverTime)
                    .HasColumnType("datetime")
                    .HasColumnName("reciverTime");
                entity.Property(e => e.ReciverUser).HasMaxLength(500);
                entity.Property(e => e.Reciverchat)
                    .HasMaxLength(4000)
                    .HasColumnName("reciverchat");
                entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
                entity.Property(e => e.VisitorChat1)
                    .HasMaxLength(4000)
                    .HasColumnName("VisitorChat");
                entity.Property(e => e.VisitorUser).HasMaxLength(500);
                entity.Property(e => e.VisitrChatTime)
                    .HasColumnType("datetime")
                    .HasColumnName("visitrChatTime");
            });

            modelBuilder.Entity<Visitormapping>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__visitorm__3213E83FA71C8350");

                entity.ToTable("visitormapping", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Siteadminid)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("siteadminid");
                entity.Property(e => e.Username)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<Wallet>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__wallet__3213E83FF96E813E");

                entity.ToTable("wallet", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Amount).HasColumnType("decimal(16, 2)");
                entity.Property(e => e.IstupateDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("istupateDatetime");
                entity.Property(e => e.Username)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("username");
                entity.Property(e => e.UtcupdateDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<WalletResponse>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__WalletRe__3213E83F2BA64E88");

                entity.ToTable("WalletResponse", "gaadiyadekho");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Amount)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
                entity.Property(e => e.Istdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("ISTDatetime");
                entity.Property(e => e.Key)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
                entity.Property(e => e.Myhpayid)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
                entity.Property(e => e.Productinfo)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("productinfo");
                entity.Property(e => e.Respone).HasColumnName("respone");
                entity.Property(e => e.Salt)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
                entity.Property(e => e.Status)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("status");
                entity.Property(e => e.Txnid)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
                entity.Property(e => e.Userid)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("userid");
                entity.Property(e => e.UtcdateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("UTCDateTime");
            });

            OnModelCreatingGeneratedFunctions(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}