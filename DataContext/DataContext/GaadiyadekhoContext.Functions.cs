// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using System;
using System.Data;
using System.Linq;
using WebApplicationHosting.Models;

namespace Data.DataContext
{
    public partial class GaadiyadekhoContext
    {

        [DbFunction("allowedevents", "gaadiyadekho")]
        public IQueryable<allowedeventsResult> allowedevents(string username)
        {
            return FromExpression(() => allowedevents(username));
        }

        [DbFunction("allowedlocation", "gaadiyadekho")]
        public IQueryable<allowedlocationResult> allowedlocation()
        {
            return FromExpression(() => allowedlocation());
        }

        [DbFunction("allowedlocationusers", "gaadiyadekho")]
        public IQueryable<allowedlocationusersResult> allowedlocationusers(string username)
        {
            return FromExpression(() => allowedlocationusers(username));
        }

        [DbFunction("BreakStringIntoRows", "dbo")]
        public IQueryable<BreakStringIntoRowsResult> BreakStringIntoRows(string CommadelimitedString)
        {
            return FromExpression(() => BreakStringIntoRows(CommadelimitedString));
        }

        [DbFunction("CoordinateDistanceMiles", "gaadiyadekho")]
        public static double? CoordinateDistanceMiles(double? Latitude1, double? Longitude1, double? Latitude2, double? Longitude2)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("CSVToTableWithcol", "dbo")]
        public IQueryable<CSVToTableWithcolResult> CSVToTableWithcol(string ID, string InStr, string username)
        {
            return FromExpression(() => CSVToTableWithcol(ID, InStr, username));
        }

        [DbFunction("CSVToTableWithID", "dbo")]
        public IQueryable<CSVToTableWithIDResult> CSVToTableWithID(int? ID, string InStr)
        {
            return FromExpression(() => CSVToTableWithID(ID, InStr));
        }

        [DbFunction("deleimtertotable", "gaadiyadekho")]
        public IQueryable<deleimtertotableResult> deleimtertotable(string StringInput, string Delimiter)
        {
            return FromExpression(() => deleimtertotable(StringInput, Delimiter));
        }

        [DbFunction("Distance", "gaadiyadekho")]
        public static double? DistanceGaadiyadekho(double? lat1, double? long1, double? lat2, double? long2)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("Distance", "dbo")]
        public static double? DistanceDbo(double? lat1, double? long1, double? lat2, double? long2)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fn_Split", "gaadiyadekho")]
        public IQueryable<fn_SplitResult> fn_Split(string text, string delimiter)
        {
            return FromExpression(() => fn_Split(text, delimiter));
        }

        [DbFunction("fn_split", "dbo")]
        public IQueryable<fn_splitResult> fn_split(string delimited, string delimiter)
        {
            return FromExpression(() => fn_split(delimited, delimiter));
        }

        [DbFunction("fnCalcDistanceKM", "dbo")]
        public static double? fnCalcDistanceKMDbo(double? lat1, double? lat2, double? lon1, double? lon2)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fnCalcDistanceKM", "gaadiyadekho")]
        public static double? fnCalcDistanceKMGaadiyadekho(double? lat1, double? lat2, double? lon1, double? lon2)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("fnSplitString", "dbo")]
        public IQueryable<fnSplitStringResult> fnSplitString(string @string, string delimiter)
        {
            return FromExpression(() => fnSplitString(@string, delimiter));
        }

        [DbFunction("getDistance", "dbo")]
        public static double? getDistance(double? sourceLatitude, double? sourceLongitude, double? destinationLatitude, double? destinationLongitude)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("geteventveccount", "gaadiyadekho")]
        public static int? geteventveccount(int? input)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GetNumeric", "gaadiyadekho")]
        public static string GetNumeric(string strAlphaNumeric)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("splitstring", "gaadiyadekho")]
        public IQueryable<splitstringResult> splitstring(string stringToSplit)
        {
            return FromExpression(() => splitstring(stringToSplit));
        }

        [DbFunction("try_parse_float", "gaadiyadekho")]
        public static double? try_parse_float(string input)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("TryConvertInt", "dbo")]
        public static int? TryConvertInt(string Value)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("TryParseAsDecimal", "dbo")]
        public static bool? TryParseAsDecimal(string Value, int? Precision, int? Scale)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("udf_GetNumeric", "gaadiyadekho")]
        public static string udf_GetNumeric(string strAlphaNumeric)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("uf_CalculateDistance", "dbo")]
        public static decimal? uf_CalculateDistance(decimal? Lat1, decimal? Long1, decimal? Lat2, decimal? Long2)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ufn_CSVToTable", "dbo")]
        public IQueryable<ufn_CSVToTableResult> ufn_CSVToTable(string StringInput, string Delimiter)
        {
            return FromExpression(() => ufn_CSVToTable(StringInput, Delimiter));
        }

        [DbFunction("userallowedlocation", "gaadiyadekho")]
        public IQueryable<userallowedlocationResult> userallowedlocation(string userid)
        {
            return FromExpression(() => userallowedlocation(userid));
        }

        protected void OnModelCreatingGeneratedFunctions(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<allowedeventsResult>().HasNoKey();
            modelBuilder.Entity<allowedlocationResult>().HasNoKey();
            modelBuilder.Entity<allowedlocationusersResult>().HasNoKey();
            modelBuilder.Entity<BreakStringIntoRowsResult>().HasNoKey();
            modelBuilder.Entity<CSVToTableWithcolResult>().HasNoKey();
            modelBuilder.Entity<CSVToTableWithIDResult>().HasNoKey();
            modelBuilder.Entity<deleimtertotableResult>().HasNoKey();
            modelBuilder.Entity<fn_SplitResult>().HasNoKey();
            modelBuilder.Entity<fn_splitResult>().HasNoKey();
            modelBuilder.Entity<fnSplitStringResult>().HasNoKey();
            modelBuilder.Entity<splitstringResult>().HasNoKey();
            modelBuilder.Entity<ufn_CSVToTableResult>().HasNoKey();
            modelBuilder.Entity<userallowedlocationResult>().HasNoKey();
        }
    }
}
